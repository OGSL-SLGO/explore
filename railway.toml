# railway.toml

# Configuration du service web-api
[web-api]
rootDirectory = "web-api"
builder = "DOCKERFILE"
dockerfilePath = "web-api/Dockerfile"
startCommand = "node ./bin/www"
env = {
  DB_NAME = "cde",
  DB_USER = "postgres",
  DB_HOST = "db",
  API_URL = "http://web-api:4000/api",
  BASE_URL = "http://frontend",
  REDIS_HOST = "redis",
  ENVIRONMENT = "development"
}

# Configuration du service frontend
[frontend]
rootDirectory = "frontend"
builder = "DOCKERFILE"
dockerfilePath = "frontend/Dockerfile"
startCommand = "nginx -g 'daemon off;'"
env = {
  API_URL = "http://web-api:4000/api"
}

# Configuration du service scheduler
[scheduler]
rootDirectory = "download_scheduler"
builder = "DOCKERFILE"
dockerfilePath = "download_scheduler/Dockerfile"
startCommand = """
sh -c 'ln -sf /usr/src/app/volume/downloads /usr/src/app/downloads && \
python -u -m download_scheduler'
"""
env = {
  DB_NAME = "cde",
  DB_USER = "postgres",
  DB_HOST = "db",
  DOWNLOAD_WAF_URL = "https://pac-dev2.cioos.org/images/ceda/",
  CREATE_PDF = "False",
  DOWNLOADS_FOLDER = "./downloads",
  ENVIRONMENT = "development"
}

# Configuration du service harvester
[harvester]
rootDirectory = "."
builder = "DOCKERFILE"
dockerfilePath = "harvester/Dockerfile"
startCommand = """
sh -c 'ln -sf /usr/src/app/volume/harvest_config.yaml /usr/src/app/harvest_config.yaml && \
ln -sf /usr/src/app/volume/harvester_cache /usr/src/app/harvester_cache && \
ln -sf /usr/src/app/volume/harvest /usr/src/app/harvest && \
sh ./harvester/run.sh'
"""
env = {
  DB_NAME = "cde",
  DB_USER = "postgres",
  DB_HOST_EXTERNAL = "db",
  ENVIRONMENT = "development"
}

# Configuration du service nginx
[nginx]
rootDirectory = "nginx"
builder = "DOCKERFILE"
dockerfilePath = "nginx/Dockerfile"
startCommand = "nginx -g 'daemon off;'"
env = {
  NGINX_PORT = "8098"
}

# Configuration du service redis
[redis]
image = "redis:alpine"
command = "redis-server /usr/local/etc/redis/redis.conf"
volumes = [
  "redis-data:/var/lib/redis",
  "./redis-config/redis.conf:/usr/local/etc/redis/redis.conf"
]
expose = ["6379"]

# Configuration du service db
[db]
image = "postgis/postgis:13-3.1-alpine"
platform = "linux/x86_64"
ports = ["5432:5432"]
environment = [
  "PGPORT=5432",
  "POSTGRES_DB=cde",
  "POSTGRES_USER=postgres"
]
volumes = [
  "postgres-data:/var/lib/postgresql/data",
  "./database:/docker-entrypoint-initdb.d"
]
healthcheck = { test = ["CMD", "pg_isready", "-q", "-d", "cde", "-U", "postgres"], interval = "10s", timeout = "5s", retries = 5 }
